// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (id, title, url, description, published_at, feed_id, created_at, updated_at)
Values (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8
)
RETURNING id, title, url, description, published_at, feed_id, created_at, updated_at
`

type CreatePostParams struct {
	ID          uuid.UUID
	Title       sql.NullString
	Url         sql.NullString
	Description sql.NullString
	PublishedAt sql.NullTime
	FeedID      uuid.NullUUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.ID,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.PublishedAt,
		arg.FeedID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Url,
		&i.Description,
		&i.PublishedAt,
		&i.FeedID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPostsForUser = `-- name: GetPostsForUser :many
SELECT posts.id, title, posts.url, description, published_at, posts.feed_id, posts.created_at, posts.updated_at, feeds.id, name, feeds.url, feeds.user_id, last_fetched_at, feeds.created_at, feeds.updated_at, feed_follows.id, feed_follows.user_id, feed_follows.feed_id, feed_follows.created_at, feed_follows.updated_at, feeds.name AS feed_name FROM posts
LEFT JOIN feeds
ON feeds.id=posts.feed_id
JOIN feed_follows 
ON feed_follows.feed_id=posts.feed_id AND feed_follows.user_id=$1
ORDER BY posts.published_at DESC
LIMIT $2
`

type GetPostsForUserParams struct {
	UserID uuid.NullUUID
	Limit  int32
}

type GetPostsForUserRow struct {
	ID            uuid.UUID
	Title         sql.NullString
	Url           sql.NullString
	Description   sql.NullString
	PublishedAt   sql.NullTime
	FeedID        uuid.NullUUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
	ID_2          uuid.NullUUID
	Name          sql.NullString
	Url_2         sql.NullString
	UserID        uuid.NullUUID
	LastFetchedAt sql.NullTime
	CreatedAt_2   sql.NullTime
	UpdatedAt_2   sql.NullTime
	ID_3          uuid.UUID
	UserID_2      uuid.NullUUID
	FeedID_2      uuid.NullUUID
	CreatedAt_3   time.Time
	UpdatedAt_3   time.Time
	FeedName      sql.NullString
}

func (q *Queries) GetPostsForUser(ctx context.Context, arg GetPostsForUserParams) ([]GetPostsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsForUser, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsForUserRow
	for rows.Next() {
		var i GetPostsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.PublishedAt,
			&i.FeedID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.Name,
			&i.Url_2,
			&i.UserID,
			&i.LastFetchedAt,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.ID_3,
			&i.UserID_2,
			&i.FeedID_2,
			&i.CreatedAt_3,
			&i.UpdatedAt_3,
			&i.FeedName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
